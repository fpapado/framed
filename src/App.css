main > * + * {
  margin-top: 1rem;
}

input[type="color"] {
  min-width: 88px;
  min-height: 44px;
  background-color: var(--color-bg);
  border: 1px solid var(--color-divider);
  border-radius: 2px;
}

h1 {
  margin: 0;
  display: flex;
  gap: 0.5rem;
  justify-content: center;
  align-items: center;
  max-width: max-content;
  margin-left: auto;
  margin-right: auto;
  font-size: 1.25rem;
}

.logo {
  width: 32px;
  height: 32px;
  border: 4px solid;
  border-image-slice: 1;
  border-image-source: conic-gradient(
    hsl(260, 93%, 82%),
    hsl(275, 100%, 65%),
    hsl(260, 93%, 82%)
  );
  aspect-ratio: 1/1;
}

[data-theme="alwaysLight"] .logo {
  border-image-source: conic-gradient(
    hsl(275, 100%, 60%),
    hsl(260, 93%, 50%),
    hsl(275, 100%, 60%)
  );
}

@media (prefers-color-scheme: light) {
  [data-theme="system"] .logo {
    border-image-source: conic-gradient(
      hsl(275, 100%, 60%),
      hsl(260, 93%, 50%),
      hsl(275, 100%, 60%)
    );
  }
}

@media (prefers-color-scheme: dark) {
  [data-theme="system"] .logo {
    border-image-source: conic-gradient(
      hsl(260, 93%, 82%),
      hsl(275, 100%, 65%),
      hsl(260, 93%, 82%)
    );
  }
}

.FilePicker,
.ShareButton,
.DownloadButton {
  display: block;
  padding: 0.5rem;
  font-size: 1rem;
  border: 1px solid var(--color-divider);
  border-radius: 2px;
  background-color: var(--color-bg);
  color: var(--color-fg);
  min-width: 44px;
  min-height: 44px;
  font-weight: 400;
  width: 100%;
  transition: background-color 400ms ease-out;
}

.FilePicker:hover,
.ShareButton:hover,
.DownloadButton:hover,
.ExpandableArea button:hover {
  background-color: var(--color-bg-secondary);
}

.CanvasArea {
  margin-top: 1rem;
  grid-area: canvasArea;
}

.Controls > * + * {
  margin-top: 1rem;
}

.TopControls {
  grid-area: topControls;
}

.BottomControls {
  grid-area: bottomControls;
}

.PreviewCanvas {
  display: block;
  max-width: 100%;
  width: 100%;
  border: 1px solid var(--color-divider);
}

.DownloadButton {
  margin-top: 1rem;
}

.CanvasWrapper {
  position: relative;
}

@keyframes fadeIn {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

.CanvasWrapper .LoadingIndicator {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
  animation-name: fadeIn;
  animation-duration: 400ms;
  animation-delay: 400ms;
  animation-fill-mode: both;
  color: #111;
  background: #ffffffaa;
  padding: 1rem;
  border-radius: 8px;
}

.CanvasWrapper .ErrorIndicator {
  padding: 1rem;
  max-width: 18rem;
  width: 100%;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
  animation-name: fadeIn;
  animation-duration: 400ms;
  animation-delay: 400ms;
  animation-fill-mode: both;
  color: rgb(251, 166, 166);
  background: #111;
  border-radius: 8px;
  line-height: 1.4;
}

legend {
  font-weight: 600;
}

.RadioGroup {
  display: flex;
  flex-wrap: wrap;
  margin-top: 0.5rem;
  gap: 1rem;
}

.Radio {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  justify-content: center;
  align-items: center;
  min-width: 88px;
  min-height: 44px;
  border: 1px solid var(--color-divider);
  padding: 0.5rem;
  border-radius: 2px;
  background-color: var(--color-bg);
  color: var(--color-fg);
}

.Radio input[type="radio"] {
  min-width: 44px;
  min-height: 44px;
}

.BottomControls {
  /* Space the bottom controls from the canvas and footer */
  margin-top: 1rem;
  margin-bottom: 2rem;
}

@media screen and (min-width: 64rem) {
  /* Reset canvas area top margin from narrow screen view */
  .CanvasArea {
    margin-top: 0;
  }

  .BottomControls {
    margin: 0;
  }

  .WorkArea {
    display: grid;
    /* The ___ blank area is important to allow the canvas to stretch, 
     *  while the controls stay alignted to the start without stretching.
     */
    grid-template-areas:
      "canvasArea topControls"
      "canvasArea bottomControls"
      "canvasArea blank";
    grid-template-columns: 28rem minmax(12rem, 22rem);
    justify-content: center;
    column-gap: 2rem;
  }
}

.DarkModeSetting {
  --dm-border-radius: 8px;
  max-width: fit-content;
  margin-left: auto;
  margin-right: auto;
}

.DarkModeSetting .GroupLabel {
  text-align: center;
  margin-bottom: 0.25rem;
  font-weight: 600;
}

.DarkModeSetting-Wrapper {
  display: flex;
  margin-left: auto;
  margin-right: auto;
  padding: 0.25rem;
  flex-direction: row;
  justify-content: center;
  gap: 0.5rem;
  border: 2px solid var(--color-divider);
  border-radius: var(--dm-border-radius);
}

.DarkModeSetting button {
  /* Needed for absolute positioning of animated background */
  position: relative;
  display: block;
  padding: 0.5rem;
  /* Prompt buttons to have similar or same widths (8ch is ~the width of the word 'System') */
  min-width: max(44px, 8ch);
  min-height: 44px;
  border: none;
  border-radius: var(--dm-border-radius);
  background-color: var(--color-bg);
  font-weight: 600;
  color: var(--color-darkmode-fg);
  background-color: var(--color-darkmode-bg);
  transition: background-color 400ms ease-out;
  /* Dark mode button taps already have feedback in the form of animation or background transition, and this seems jarring */
  -webkit-tap-highlight-color: transparent;
}

.DarkModeSetting button:not([aria-pressed="true"]):hover {
  background-color: var(--color-darkmode-bg-hover);
}

.DarkModeSetting .background {
  position: absolute;
  bottom: 0px;
  left: 0;
  right: 0;
  height: 100%;
  width: 100%;
  background-color: var(--color-darkmode-accent);
  border-radius: var(--dm-border-radius);
  /* Needed to not be obscured by other buttons when moving from last to first */
  z-index: 1;
}

.DarkModeSetting .label {
  position: relative;
  /* Needed to not be obscured by background */
  z-index: 2;
}

/* If the user prefers reduced motion, we no longer animate a shared background. 
 * Instead, we animate opacity, to keep some context. 
 */
@media (prefers-reduced-motion: reduce) {
  /* The background is still present, and just pops into place. 
   * Its colour obscures the transition animation, so we set it to transparent to avoid that.
  */
  .DarkModeSetting .background {
    background-color: transparent;
  }

  .DarkModeSetting button {
    transition: background-color 400ms ease-out;
  }

  .DarkModeSetting button[aria-pressed="true"] {
    background-color: var(--color-darkmode-accent);
  }
}

.ServiceWorkerUpdatePrompt h2 {
  font-size: 1.25rem;
  margin: 0;
}

.ServiceWorkerUpdatePrompt {
  width: fit-content;
  padding: 1rem;
  margin-left: auto;
  margin-right: auto;
  border: 1px solid var(--color-divider);
  border-radius: 2px;
  background-color: var(--color-bg-secondary);
}

.ServiceWorkerUpdatePrompt > * + * {
  margin-top: 1rem;
  margin-bottom: 0;
}

.ServiceWorkerUpdatePrompt .Actions {
  display: flex;
  gap: 0.5rem;
}

/* TODO: Make a main button style */
.ServiceWorkerUpdatePrompt button {
  display: block;
  padding: 0.5rem;
  min-width: 44px;
  min-height: 44px;
  border: 1px solid var(--color-divider);
  border-radius: 2px;
  background-color: var(--color-bg);
  color: var(--color-fg);
  font-weight: 600;
}

.ServiceWorkerUpdatePrompt button.primary {
  /* TODO Use better variables for these */
  color: #111;
  background-color: var(--color-primary-button-accent);
}

.ShareArea [role="status"] {
  max-width: 100%;
}

.ShareButton {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.5em;
}

.ShareButton svg {
  width: 1em;
  height: 1em;
}

.ExpandableArea {
  margin-top: 0.5rem;
}

.ExpandableArea button {
  display: flex;
  max-width: 28rem;
  justify-content: center;
  align-items: center;
  gap: 0.5em;
  border: 1px solid var(--color-divider);
  border-radius: 2px;
  background-color: var(--color-bg);
  color: var(--color-fg);
  min-width: 44px;
  min-height: 44px;
  font-weight: 400;
  width: 100%;
  transition: background-color 400ms ease-out;
}

@media (prefers-reduced-motion: no-preference) {
  .ExpandableArea button svg {
    transition: transform 200ms ease-out;
  }
}

.ExpandableArea button[aria-expanded="true"] svg {
  transform: rotateZ(180deg);
}

.CustomColorPicker {
  /* Override the width of sliders */
  --spectrum-colorslider-default-length: 100%;
  /* Set a maximum width for the picker itself; the value is arbitrary, based on eyeballing it. */
  max-width: 28rem;
  background: none !important;
  font: inherit !important;
  padding-inline: calc(
    (
        var(
            --spectrum-colorhandle-size,
            var(--spectrum-global-dimension-size-200)
          ) / 2
      ) + 2px
  );
}

.CustomColorPicker-Wrapper {
  display: flex;
  margin-top: 0.5rem;
  flex-direction: column;
  gap: 0.5rem;
}

.NumberInput {
  display: block;
  padding: 0.5rem;
  font-size: 1rem;
  border: 1px solid var(--color-divider);
  border-radius: 2px;
  min-width: 44px;
  min-height: 44px;
  font-weight: 400;
  transition: background-color 400ms ease-out;
}
